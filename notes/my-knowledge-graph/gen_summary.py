#!/usr/bin/python3

import datetime
import os
import typing as t
from functools import cached_property

# cd to the src directory
os.chdir(os.path.join(os.path.dirname((os.path.abspath(__file__))), "src"))


class DocStructure:
    """Represents a file or folder in the documentation filetree."""

    def __init__(self, path: str) -> None:
        self.path = path

    @cached_property
    def is_file(self) -> bool:
        """Determines if the object is a file."""
        return os.path.isfile(self.path)

    @cached_property
    def depth(self) -> int:
        """Depth of the object in the file hierarchy."""
        depth = len(self.path[2:].split(os.sep)) - 1
        if self.name == "home.md":
            return depth - 1
        return depth

    @cached_property
    def name(self) -> str:
        """The name of the file or folder."""
        return self.path.split(os.sep)[-1]

    @cached_property
    def is_hidden(self) -> bool:
        """Determines if this file should be included in the summary or not"""
        if self.name.startswith(("_", ".")):
            return True
        return False

    def get_title(self) -> str:
        """Retrieve the first h1 heading of the file."""
        if not self.is_file:
            raise ValueError(f"Not a file: {self.path}")

        with open(self.path, "r", encoding="utf-8") as f:
            for line in f.readlines():
                if line.startswith("# "):
                    return line[2:].strip()[:50]
        return self.name[:50]  # Fallback to filename


structs: t.MutableSequence[DocStructure] = []

for root, folders, files in sorted(os.walk(".")):
    if root == ".":
        continue

    if "home.md" in files:
        structs.append(DocStructure(os.path.join(root, "home.md")))

    for file in sorted(files):
        if not file.endswith(".md") or file == "home.md":
            continue
        structs.append(DocStructure(os.path.join(root, file)))

with open(os.path.join(".", "SUMMARY.md"), "w", encoding="utf-8") as f:
    f.write(
        f"""<!-- Generated by gen_summary.py - {datetime.datetime.utcnow().isoformat()} (UTC) -->
# Summary

[Home](./home.md)\n\n"""
    )

    for struct in structs:
        if struct.is_hidden:
            continue
        f.write("  " * struct.depth + f"- [{struct.get_title()}]({struct.path})\n")
